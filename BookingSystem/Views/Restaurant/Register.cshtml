@using Data.Constants
@model Data.Models.tbRestaurant
@{
    ViewData["Title"] = "Restaurant Register Page";
    Layout = "_PlainLayout";
}

<div class="row justify-content-center">
    <div class="col-12 col-md-5 custom-container border">
        <div class="w-100">
            <img class="w-100 img-fluid" src="~/img/logo image.png" />
        </div>

        <h2 class="my-5">Welcome to TableTalk!</h2>
        <form id="restaurant-reg-form" method="post" enctype="multipart/form-data">
            <div id="step1" style="display: block;">

                <!-- input group -->
                <div class="mb-3">
                    <label for="name" class="form-label">Restaurant Name</label>

                    <div class="input-group input-group-merge">
                        <div class="input-group-prepend input-group-text" id="name">
                            <i class="bi bi-person"></i>
                        </div>
                        <input type="text" class="form-control" name="Name" value="@Model.Name" placeholder="Name" required>
                    </div>
                </div>
                <!-- end input group -->
                <!-- input group -->
                <div class="mb-3">
                    <label for="email" class="form-label">Email</label>

                    <div class="input-group input-group-merge">
                        <div class="input-group-prepend input-group-text" id="email">
                            <i class="bi-envelope-open"></i>
                        </div>
                        <input type="text" class="form-control" name="Email" value="@Model.Email" placeholder="mark@example.com" required>
                    </div>
                </div>
                <!-- end input group -->
                <!-- input group -->
                <div class="mb-3">
                    <label for="phone" class="form-label">Phone</label>

                    <div class="input-group input-group-merge">
                        <div class="input-group-prepend input-group-text" id="phone">
                            <i class="bi-phone"></i>
                        </div>
                        <input type="text" class="form-control" name="Phone" value="@Model.Phone" placeholder="09***" required>
                    </div>
                </div>
                <!-- end input group -->
                <!-- input group -->
                <div class="mb-3">
                    <label for="password" class="form-label">Password</label>

                    <div class="input-group input-group-merge">
                        <div class="input-group-prepend input-group-text">
                            <i class="bi-lock"></i>
                        </div>
                        <input type="password" class="form-control" name="Password" value="@Model.Password" id="password" placeholder="***" required>
                    </div>
                </div>
                <!-- end input group -->
                <div class="d-grid mb-3">
                    <button type="button" class="btn btn-primary btn-lg" onclick="showStep(2)">Next</button>
                </div>

                <div class="text-center">
                    <span>Are you already have an account?<a class="btn btn-link btn-sm" href="/Signup">Login</a></span>
                </div>
            </div>

            <div id="step2" style="display: none;">
                <div id="step1" style="display: block;">
                    <div class="mb-3">
                        <label class="form-label" for="exampleFormControlInput1">Cover Photo</label>
                        <img src="@Model.CoverPhotoUrl" id="cover-preview" width="50" height="50"/>
                        <input type="hidden" name="CoverPhotoString" id="cover_photo_article" />
                        <input type="file" class="form-control" id="cover-file-data" onchange="ShowCoverPreview(this, document.getElementById('cover-preview'))">
                    </div>
                    <div class="mb-3">
                        <label class="form-label" for="exampleFormControlInput1">Profile Photo</label>
                        <img src="@Model.ProfilePhotoUrl" id="profile-preview" width="50" height="50" />
                        <input type="hidden" name="ProfilePhotoString" id="profile_photo_article" />
                        <input type="file" id="profile-file-data"  class="form-control" onchange="ShowProfilePreview(this, document.getElementById('profile-preview'))">

                    </div>

                    <!-- Media -->
                    <label class="form-label" for="exampleFormControlInput1">Cover Photo</label>
                    <div class="d-flex align-items-center mb-3">
                        <!-- Avatar -->
                        <label class="avatar avatar-xl avatar-circle" for="coverPhoto">
                            <img id="coverImg" class="avatar-img w-100" src="../assets/img/160x160/img1.jpg" alt="Image Description">
                        </label>

                        <div class="d-flex gap-3 ms-4">
                            <div class="form-attachment-btn btn btn-sm btn-primary">
                                Upload photo
                                <input type="file" class="js-file-attach form-attachment-btn-label" id="coverPhoto"
                                       data-hs-file-attach-options='{
                                      "textTarget": "#coverImg",
                                      "mode": "image",
                                      "targetAttr": "src",
                                      "resetTarget": ".js-file-attach-reset-cover-img",
                                      "resetImg": "../assets/img/160x160/img1.jpg",
                                      "allowTypes": [".png", ".jpeg", ".jpg"]
                                   }'>
                            </div>
                            <!-- End Avatar -->

                            <button type="button" class="js-file-attach-reset-cover-img btn btn-white btn-sm">Delete</button>
                        </div>
                    </div>
                    <!-- End Media -->
                    <!-- Media -->
                    <label class="form-label" for="exampleFormControlInput1">Profile Photo</label>
                    <div class="d-flex align-items-center mb-3">
                        <!-- Avatar -->
                        <label class="avatar avatar-xl avatar-circle" for="profilePhoto">
                            <img id="profileImg" class="avatar-img w-100" src="../assets/img/160x160/img1.jpg" alt="Image Description">
                        </label>

                        <div class="d-flex gap-3 ms-4">
                            <div class="form-attachment-btn btn btn-sm btn-primary">
                                Upload photo
                                <input type="file" class="js-file-attach form-attachment-btn-label" id="profilePhoto"
                                       data-hs-file-attach-options='{
                                      "textTarget": "#profileImg",
                                      "mode": "image",
                                      "targetAttr": "src",
                                      "resetTarget": ".js-file-attach-reset-profile-img",
                                      "resetImg": "../assets/img/160x160/img1.jpg",
                                      "allowTypes": [".png", ".jpeg", ".jpg"]
                                   }'>
                            </div>
                            <!-- End Avatar -->

                            <button type="button" class="js-file-attach-reset-profile-img btn btn-white btn-sm">Delete</button>
                        </div>
                    </div>
                    <!-- End Media -->
                    <!-- input group -->
                    <div class="mb-3">
                        <label for="address" class="form-label">Address</label>

                        <div class="input-group input-group-merge">
                            <div class="input-group-prepend input-group-text" id="address">
                                <i class="bi-envelope-open"></i>
                            </div>
                            <input type="text" class="form-control" name="Location" value="@Model.Location" placeholder="Address" required>
                        </div>
                    </div>
                    <!-- end input group -->
                    <!-- input group -->
                    <div class="mb-3">
                        <label for="timeGp" class="form-label">Time</label>
                        <div class="d-flex">
                            <div class="input-group input-group-merge me-2">
                                <div class="input-group-prepend input-group-text" id="">
                                    <i class="bi-clock"></i>
                                </div>
                                <input type="time" class="form-control" name="OpenTime" value="@Model.OpenTime" placeholder="Open at" required>
                            </div>
                            <div class="input-group input-group-merge">
                                <div class="input-group-prepend input-group-text" id="">
                                    <i class="bi-clock"></i>
                                </div>
                                <input type="time" class="form-control" name="CloseTime" value="@Model.CloseTime" placeholder="Close at" required>
                            </div>
                        </div>

                    </div>
                    <!-- end input group -->
                   

                    <!-- input group -->
                    <div class="mb-3">
                        <label for="tables" class="form-label">Total Tables</label>

                        <div class="input-group input-group-merge">
                            <div class="input-group-prepend input-group-text" id="tables">
                                <svg xmlns="http://www.w3.org/2000/svg" width="18" height="18" viewBox="0 0 24 24"><path fill="currentColor" d="m6.5 18.725l1-2.475q.225-.575.725-.913T9.35 15H11v-4.025Q7.175 10.85 4.587 9.85T2 7.5q0-1.45 2.925-2.475T12 4q4.175 0 7.088 1.025T22 7.5q0 1.35-2.588 2.35T13 10.975V15h1.65q.6 0 1.113.338t.737.912l1 2.475q.2.45-.088.863t-.787.412q-.275 0-.5-.15t-.35-.425L14.8 17H9.2l-.975 2.425q-.125.275-.35.425t-.5.15q-.5 0-.787-.413t-.088-.862M12 9q2.425 0 4.575-.425t3.15-1.075q-1-.65-3.15-1.075T12 6t-4.575.425T4.275 7.5q1 .65 3.15 1.075T12 9m0-1.5" /></svg>
                            </div>
                            <input type="number" class="form-control" name="NoOfTable" value="@Model.NoOfTable" placeholder="Table Count" required>
                        </div>
                    </div>
                    <!-- end input group -->
                    <!-- input group -->
                    <div class="mb-3">
                        <label for="seats" class="form-label">Number of seats</label>

                        <div class="input-group input-group-merge">
                            <div class="input-group-prepend input-group-text" id="seats">
                                <svg xmlns="http://www.w3.org/2000/svg" width="18" height="18" viewBox="0 0 24 24"><path fill="currentColor" d="M5 21q-.425 0-.712-.288T4 20v-3q0-.825.588-1.412T6 15h12q.825 0 1.413.588T20 17v3q0 .425-.288.713T19 21t-.712-.288T18 20v-3H6v3q0 .425-.288.713T5 21m-.5-7q-.625 0-1.062-.437T3 12.5t.438-1.062T4.5 11t1.063.438T6 12.5t-.437 1.063T4.5 14M7 14V5q0-.825.588-1.412T9 3h6q.825 0 1.413.588T17 5v9zm12.5 0q-.625 0-1.062-.437T18 12.5t.438-1.062T19.5 11t1.063.438T21 12.5t-.437 1.063T19.5 14M9 12h6V5H9zm0 0h6z" /></svg>
                            </div>
                            <input type="number" class="form-control" name="PeoplePerTable" value="@Model.PeoplePerTable" placeholder="Number of person per table" required>
                        </div>
                    </div>
                    <!-- end input group -->
                    <!-- input group -->
                    <div class="mb-3">
                        <label for="quote" class="form-label">Quote(Optional)</label>

                        <div class="input-group input-group-merge">
                            <div class="input-group-prepend input-group-text" >
                                <i class="bi-lock"></i>
                            </div>
                            <input type="text" class="form-control" id="quote" placeholder="Restaurant's Quote'" name="Quote" value="@Model.Quote">
                        </div>
                    </div>
                    <!-- end input group -->
                    <div class="mb-3">
                        <label class="form-label" for="about">About</label>
                        <textarea name="Description" value="@Model.Description" class="form-control" placeholder="Write about the restaurant" rows="4"></textarea>
                    </div>
                    <div class="d-flex mb-3">
                        <button type="button" class="btn btn-outlined btn-lg" onclick="showStep(1)">Back</button>
                        <div class="ms-auto">
                            <button type="submit" class="btn btn-primary btn-lg">Register</button>
                        </div>

                    </div>
                    <div class="text-center">
                        <span>Are you already have an account? <a class="btn btn-link btn-sm" href="../Authentication">Login</a></span>
                    </div>
                </div>

            </div>
        </form>
    </div>
</div>




@section scripts {


    <script type="text/javascript">
        var filesize = 2000000;

        function showStep(step) {
            // Hide both steps initially
            document.getElementById('step1').style.display = 'none';
            document.getElementById('step2').style.display = 'none';

            // Show the selected step based on the step number
            document.getElementById('step' + step).style.display = 'block';
        }

        $('#restaurant-reg-form').submit(function (e) {
            e.preventDefault();

            $.ajax({
                cache: false,
                url: '@Url.Action("UpSert", "Restaurant")',
                type: "Post",
                data: $(this).serialize(),
                beforeSend: function () {
                    $('.btn').prop("disabled", true);
                },
                success: function (data) {
                    console.log("data:", data)
                    if (data?.Status ==  "@ResponseStatus.Success") {
                        alert("Successfully registered!!");
                        window.location.href = "../Authentication";
                    }
                    else {
                        alert("Registeration Failed!!")
                    }
                },
                complete: function () {
                    $('.btn').prop("disabled", false);

                }
            });
        });

        function dataURItoBlob(dataURI) {
            var binary = atob(dataURI.split(',')[1]);
            var array = [];
            for (var i = 0; i < binary.length; i++) {
                array.push(binary.charCodeAt(i));
            }
            return new Blob([new Uint8Array(array)], { type: 'image/png' });
        }


        //   function ShowImagePreviewArticle(imageUploader, previewImage) {
        //     var filesToUpload = document.getElementById('filearticle').files;
        //     var file = filesToUpload[0];

        //     if (filesize != undefined) {
        //         if (filesize <= file.size) {
        //             isFileSizeValid = false;
        //             swal({
        //                 title: "File size can't be greater than 2 MB.",
        //                 text: "",
        //                 buttonsStyling: false,
        //                 confirmButtonClass: "btn btn-primary",
        //                 type: "error"
        //             }).catch(swal.noop);
        //             return false;
        //         } else {
        //             isFileSizeValid = true;
        //         }

        //     }

        //     var img = document.createElement("img");
        //     var reader = new FileReader();
        //     reader.onload = function (e) {
        //         $(previewImage).attr('src', e.target.result);
        //         var mime_type = "image/jpeg";
        //         if (typeof output_format !== "undefined" && output_format == "png") {
        //             mime_type = "image/png";
        //         }
        //         reader.onloadend = function () {
        //             img.src = e.target.result;
        //             var base64data = reader.result;
        //             console.log("base64",base64data);
                   
        //             $('#cover_photo_article').val(base64data.split(",")[1]);
                   
        //         }
        //     }
        //     reader.redAsDataURL(file);
        // }


        // function ShowProfilePreview(imageUploader, previewImage) {
        //     var filesToUpload = document.getElementById('profile_article').files;
        //     var file = filesToUpload[0];

        //     if (filesize != undefined) {
        //         if (filesize <= file.size) {
        //             isFileSizeValid = false;
        //             swal({
        //                 title: "File size can't be greater than 2 MB.",
        //                 text: "",
        //                 buttonsStyling: false,
        //                 confirmButtonClass: "btn btn-primary",
        //                 type: "error"
        //             }).catch(swal.noop);
        //             return false;
        //         } else {
        //             isFileSizeValid = true;
        //         }

        //     }

        //     var img = document.createElement("img");
        //     var reader = new FileReader();
        //     reader.onload = function (e) {
        //         $(previewImage).attr('src', e.target.result);
        //         var mime_type = "image/jpeg";
        //         if (typeof output_format !== "undefined" && output_format == "png") {
        //             mime_type = "image/png";
        //         }
        //         reader.onloadend = function () {
        //             img.src = e.target.result;
        //             var base64data = reader.result;
        //             console.log("base64",base64data);
                   
        //             $('#profile_photo_article').val(base64data.split(",")[1]);
                   
        //         }
        //     }
        //     reader.redAsDataURL(file);
        // }

         function maxwidthheight(width, height) {
            var MAX_WIDTH = 1200;  // to remove maximum width height
            var MAX_HEIGHT = 1200;
            var width = width;
            var height = height;

            if (width > height) {
                if (width > MAX_WIDTH) {
                    height *= MAX_WIDTH / width;
                    width = MAX_WIDTH;
                }
            } else {
                if (height > MAX_HEIGHT) {
                    width *= MAX_HEIGHT / height;
                    height = MAX_HEIGHT;
                }
            }
            var a = { width: width, height: height };
            return a
        }


        function ShowProfilePreview(imageUploader, previewImage) {
            if (imageUploader.files && imageUploader.files[0]) {
                var files = $("#profile-file-data").get(0).files;
                var file = files[0];

                var img = document.createElement("img");
                var reader = new FileReader();
                reader.onload = function (e) {
                    $(previewImage).attr('src', e.target.result);
                    img.src = e.target.result;
                    var mime_type = "image/jpeg";
                    if (typeof output_format !== "undefined" && output_format == "png") {
                        mime_type = "image/png";
                    }
                    var canvas = document.createElement("canvas");
                    if (navigator.userAgent.toLowerCase().indexOf('firefox') > -1) {
                        alert('Photo is uploading...');
                    }
                    //set max height width
                    var gg = maxwidthheight(img.width, img.height);
                    width = gg.width;
                    height = gg.height;
                    canvas.width = width;
                    canvas.height = height;
                    var ctx = canvas.getContext("2d");
                    ctx.drawImage(img, 0, 0, canvas.width, canvas.height);
                    var dataurl = canvas.toDataURL(mime_type, 60 / 100);
                    //document.getElementById('image').src = dataurl;
                    var blob = dataURItoBlob(dataurl);
                    console.log("blob" + dataurl);

                    reader.onloadend = function () {
                        console.log("reader result " + reader.result);
                        var base64data = reader.result;
                         console.log(base64data);
                        $('#profile_photo_article').val(base64data.split(",")[1]);
                    }

                }
                reader.readAsDataURL(file);
            }



        }



        function ShowCoverPreview(imageUploader, previewImage) {
            if (imageUploader.files && imageUploader.files[0]) {
                var files = $("#cover-file-data").get(0).files;
                var file = files[0];

                var img = document.createElement("img");
                var reader = new FileReader();
                reader.onload = function (e) {
                    $(previewImage).attr('src', e.target.result);
                    img.src = e.target.result;
                    var mime_type = "image/jpeg";
                    if (typeof output_format !== "undefined" && output_format == "png") {
                        mime_type = "image/png";
                    }
                    var canvas = document.createElement("canvas");
                    if (navigator.userAgent.toLowerCase().indexOf('firefox') > -1) {
                        alert('Photo is uploading...');
                    }
                    //set max height width
                    var gg = maxwidthheight(img.width, img.height);
                    width = gg.width;
                    height = gg.height;
                    canvas.width = width;
                    canvas.height = height;
                    var ctx = canvas.getContext("2d");
                    ctx.drawImage(img, 0, 0, canvas.width, canvas.height);
                    var dataurl = canvas.toDataURL(mime_type, 60 / 100);
                    //document.getElementById('image').src = dataurl;
                    var blob = dataURItoBlob(dataurl);
                    console.log("blob" + dataurl);

                    reader.onloadend = function () {
                        console.log("reader result " + reader.result);
                        var base64data = reader.result;
                        // console.log(base64data);
                         $('#cover_photo_article').val(base64data.split(",")[1]);
                        
                    }

                }
                reader.readAsDataURL(file);
            }



        }

    </script>

    <script>
        $(document).ready(function () {
            // INITIALIZATION OF FILE ATTACH
            // =======================================================
            new HSFileAttach('.js-file-attach')
        })
    </script>

}